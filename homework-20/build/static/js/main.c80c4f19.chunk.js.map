{"version":3,"sources":["components/Timer.js","components/Training.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","initialMinutes","initialSeconds","useState","minutes","setMinutes","seconds","setSeconds","intervalID","setIntervalID","hasTimerEnded","isTimerRunning","update","useEffect","clearInterval","startTimer","setInterval","stopTimer","Training","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMA8CeA,EA1CD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,eAAoB,EAElBC,mBAASF,GAFS,mBAEzCG,EAFyC,KAEhCC,EAFgC,OAGlBF,mBAASD,GAHS,mBAGzCI,EAHyC,KAGhCC,EAHgC,OAKZJ,mBAAS,GALG,mBAKzCK,EALyC,KAK7BC,EAL6B,KAO1CC,EAAgBN,GAAWE,GAAW,EACtCK,EAA+B,GAAdH,EAEjBI,EAAS,WACXL,GAAW,SAAAD,GAAO,OAAe,GAAXA,EAAeA,EAAQ,GAAKA,EAAQ,KAC1DD,GAAW,SAAAD,GAAO,OAAIA,EAAQ,MAsBlC,OAVAS,qBAAU,WACFH,IACAI,cAAcN,GACdC,EAAc,MAEnB,CAACC,IAEJG,qBAAU,kBAAM,WACZC,cAAcN,MACf,IACI,CACHJ,UACAE,UACAS,WAvBe,WACVL,GAAkBC,GACnBF,EAAcO,YAAYJ,EAAQ,OAsBtCK,UAnBc,WACdH,cAAcN,GACdC,EAAc,M,OCdPS,EARE,WAAO,IAAD,EACgClB,EAAM,CAACC,eAAe,GAAIC,eAAe,IAArFE,EADY,EACZA,QAASE,EADG,EACHA,QAASS,EADN,EACMA,WAAYE,EADlB,EACkBA,UACrC,OAAO,qCACH,gCAAMb,EAAN,IAAgBE,KAChB,wBAAQa,QAASJ,EAAjB,mBACA,wBAAQI,QAASF,EAAjB,sBCKOG,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,sCACE,cAAC,EAAD,QCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c80c4f19.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nconst Timer = ({initialMinutes, initialSeconds}) => {\r\n\r\n    const [minutes, setMinutes] = useState(initialMinutes);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n\r\n    const [intervalID, setIntervalID] = useState(0);\r\n\r\n    const hasTimerEnded = minutes && seconds <= 0\r\n    const isTimerRunning = intervalID != 0\r\n\r\n    const update = () => {\r\n        setSeconds(seconds => seconds == 0 ? seconds+59 : seconds-1);\r\n        setMinutes(minutes => minutes-1);\r\n    }\r\n    const startTimer = () => {\r\n        if (!hasTimerEnded && !isTimerRunning) {\r\n            setIntervalID(setInterval(update, 1000))\r\n        }\r\n    }\r\n    const stopTimer = () => {\r\n        clearInterval(intervalID)\r\n        setIntervalID(0)\r\n    }\r\n    // clear interval when the timer ends\r\n    useEffect(() => {\r\n        if (hasTimerEnded) {\r\n            clearInterval(intervalID)\r\n            setIntervalID(0)\r\n        }\r\n    }, [hasTimerEnded])\r\n    // clear interval when component unmounts\r\n    useEffect(() => () => {\r\n        clearInterval(intervalID)\r\n    }, [])\r\n    return {\r\n        minutes,\r\n        seconds,\r\n        startTimer,\r\n        stopTimer,\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n\r\n","import React from 'react';\r\nimport Timer from './Timer';\r\n\r\nconst Training = () => {\r\n    const {minutes, seconds, startTimer, stopTimer } = Timer({initialMinutes:10, initialSeconds:5})\r\n    return <>\r\n        <div>{minutes} {seconds}</div>\r\n        <button onClick={startTimer}>start</button>\r\n        <button onClick={stopTimer}>stop</button>\r\n    </>\r\n}\r\nexport default Training;","import './App.css';\n\nimport Training from \"./components/Training\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>test</h1>\n        <Training />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}