{"version":3,"sources":["components/Countdown.js","App.js","reportWebVitals.js","index.js"],"names":["Countdown","initialSeconds","step","useState","num","setNum","pause","setPause","intervalRef","useRef","decreaseNum","prev","useEffect","current","setInterval","clearInterval","minutes","Math","floor","seconds","str_pad_left","string","pad","length","Array","join","slice","finalTime","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEe,SAASA,EAAT,GAA4C,IAAxBC,EAAuB,EAAvBA,eAAgBC,EAAO,EAAPA,KAAO,EAEhCC,mBAASF,GAFuB,mBAE/CG,EAF+C,KAE1CC,EAF0C,OAG5BF,oBAAS,GAHmB,mBAG/CG,EAH+C,KAGxCC,EAHwC,KAKlDC,EAAcC,mBAEZC,EAAc,kBAAML,GAAO,SAACM,GAAD,OAAUA,EAAO,EAAIA,EAAOT,EAAO,MAEpEU,qBAAU,WAIN,OAHAL,GAAS,GACTC,EAAYK,QAAUC,YAAYJ,EAAoB,IAAPR,GAExC,kBAAMa,cAAcP,EAAYK,YACxC,IAEH,IASIG,EAAUC,KAAKC,MAAMd,EAAM,IAC3Be,EAAUf,EAAgB,GAAVY,EAEpB,SAASI,EAAaC,EAAOC,EAAIC,GAC7B,OAAQ,IAAIC,MAAMD,EAAO,GAAGE,KAAKH,GAAKD,GAAQK,OAAOH,GAGzD,IAAII,EAAYP,EAAaJ,EAAQ,IAAI,GAAG,IAAII,EAAaD,EAAQ,IAAI,GAEzE,OACI,gCACI,8BAAMQ,IACN,wBAAQC,QArBI,WACXtB,EAGDE,EAAYK,QAAUC,YAAYJ,EAAoB,IAAPR,GAF/Ca,cAAcP,EAAYK,SAI9BN,GAAS,SAACI,GAAD,OAAWA,MAehB,SAA+BL,EAAQ,MAAQ,aCnC5C,SAASuB,IAEpB,OACI,sBAAKC,UAAU,MAAf,UACI,cAAC9B,EAAD,CAAWC,eAAgB,GAAIC,KAAM,IACrC,cAACF,EAAD,CAAWC,eAAgB,KAAMC,KAAM,OCTnD,IAYe6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.114342cc.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nexport default function Countdown({initialSeconds, step}) {\r\n\r\n    const [num, setNum] = useState(initialSeconds);\r\n    const [pause, setPause] = useState(false);\r\n\r\n    let intervalRef = useRef();\r\n\r\n    const decreaseNum = () => setNum((prev) => prev > 0 ? prev - step : 0);\r\n\r\n    useEffect(() => {\r\n        setPause(false);\r\n        intervalRef.current = setInterval(decreaseNum, step * 1000);\r\n\r\n        return () => clearInterval(intervalRef.current);\r\n    }, []);\r\n\r\n    const handleClick = () => {\r\n        if (!pause) {\r\n            clearInterval(intervalRef.current);\r\n        } else {\r\n            intervalRef.current = setInterval(decreaseNum, step * 1000);\r\n        }\r\n        setPause((prev) => !prev);\r\n    };\r\n\r\n    let minutes = Math.floor(num / 60);\r\n    let seconds = num - minutes * 60;\r\n\r\n    function str_pad_left(string,pad,length) {\r\n        return (new Array(length+1).join(pad)+string).slice(-length);\r\n    }\r\n\r\n    let finalTime = str_pad_left(minutes,'0',2)+':'+str_pad_left(seconds,'0',2);\r\n\r\n    return (\r\n        <div>\r\n            <div>{finalTime}</div>\r\n            <button onClick={handleClick}>{pause ? \"Run\" : \"Pause\"}</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport './App.css';\nimport Countdown from \"./components/Countdown\";\n\nexport default function App() {\n\n    return (\n        <div className=\"App\">\n            <Countdown initialSeconds={60} step={1}/>\n            <Countdown initialSeconds={3600} step={2}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}