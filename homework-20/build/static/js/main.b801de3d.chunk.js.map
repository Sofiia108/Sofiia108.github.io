{"version":3,"sources":["components/Countdown.js","App.js","reportWebVitals.js","index.js"],"names":["Countdown","initialSeconds","initialTime","Date","secondsToDate","setSeconds","useState","seconds","pause","setPause","intervalRef","useRef","useEffect","current","setInterval","clearInterval","toLocaleString","onClick","prev","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEe,SAASA,EAAT,GAA0C,IAApBC,EAAmB,EAAnBA,eAE3BC,EAAc,IAAIC,KAAK,KAAM,EAAG,GAChCC,EAAgBF,EAAYG,WAAWJ,GAHO,EAKtBK,mBAASF,GALa,mBAK7CG,EAL6C,aAM1BD,oBAAS,IANiB,mBAM7CE,EAN6C,KAMtCC,EANsC,KAQhDC,EAAcC,mBAElBC,qBAAU,WAIN,OAHAH,GAAS,GACTC,EAAYG,QAAUC,YAAaZ,EAAYG,WAAWE,EAAQ,GAAK,KAEhE,kBAAMQ,cAAcL,EAAYG,YACxC,IAWH,OACI,gCACI,8BAAMN,EAAQS,mBACd,wBAAQC,QAZI,WACXT,EAGDE,EAAYG,QAAUC,YAAYZ,EAAYG,WAAWE,EAAQ,GAAI,KAFrEQ,cAAcL,EAAYG,SAI9BJ,GAAS,SAACS,GAAD,OAAWA,MAMhB,SAA+BV,EAAQ,MAAQ,aC3B5C,SAASW,IAEpB,OACI,qBAAKC,UAAU,MAAf,SACI,cAACpB,EAAD,CAAWO,QAAS,OCRhC,IAYec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b801de3d.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nexport default function Countdown( { initialSeconds } ) {\r\n\r\n    const initialTime = new Date(1970, 0, 1);\r\n    const secondsToDate = initialTime.setSeconds(initialSeconds);\r\n\r\n    const [seconds, setSeconds] = useState(secondsToDate);\r\n    const [pause, setPause] = useState(false);\r\n\r\n    let intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        setPause(false);\r\n        intervalRef.current = setInterval( initialTime.setSeconds(seconds-1) , 1000);\r\n\r\n        return () => clearInterval(intervalRef.current);\r\n    }, []);\r\n\r\n    const handleClick = () => {\r\n        if (!pause) {\r\n            clearInterval(intervalRef.current);\r\n        } else {\r\n            intervalRef.current = setInterval(initialTime.setSeconds(seconds-1), 1000);\r\n        }\r\n        setPause((prev) => !prev);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>{seconds.toLocaleString()}</div>\r\n            <button onClick={handleClick}>{pause ? \"Run\" : \"Pause\"}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\nimport './App.css';\nimport Countdown from \"./components/Countdown\";\n\nexport default function App() {\n\n    return (\n        <div className=\"App\">\n            <Countdown seconds={60}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}